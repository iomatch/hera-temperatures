#!/bin/bash
strTime=$(date +'%s.%N')
commonStartTime=$(/bin/date +'%s.%N')
#################################
#
#  version: 1.0.3
#  date: 07.11.2020
#  mod': 07.11.2020
#  Copyright Tommi Nikkilae 2018
#  url: http://f8.oire.fi/blog (techy things)
#  url: http://f8.oire.fi/ (my photos)
#  email: f8@oire.fi
#  Released under GNU GPLv3
#
#################################

#################################
#
#  Functions begin here
#
getDHTread() {
	functionStartTime=$(/bin/date +'%s.%N')
	if [[ ! -z "$PPID" ]]; then
		fullCmd=$(ps -o command= -p "$PPID")
		logThis "Reading DHT22 [$SH_DHT:$srcRd] for ${PPID} [$fullCmd]..." "D" "$FUNCNAME"
	else
		logThis "Reading DHT22 [$SH_DHT:$srcRd]..." "D" "$FUNCNAME"
	fi
	brkCnt=1
	maxTries=3
	retrySleep="8"
	unset DHT22raw DHT22status
	DHT22raw=$(/usr/local/sbin/DHTXXD)
	DHT22status=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f 1)
	while [[ "$DHT22status" -ne "0" ]]; do
		logThis "Unable to read sensor. Retrying ($brkCnt/$maxTries) in $retrySleep secs." "D" "$FUNCNAME"
		if [[ "$brkCnt" -lt "$maxTries" ]]; then
			sleep $retrySleep
			((brkCnt++))
		else
			err 19 "$myNameIs :: ${FUNCNAME}()" "$brkCnt"
			exit 19
		fi
		DHT22raw=$(/usr/local/sbin/DHTXXD)
		DHT22status=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f 1)
	done
	logThis "Result: $DHT22raw." "D" "$FUNCNAME"
	# See what was called for and return results
        case $1 in
		hum|temp|raw )
			case $1 in
				hum )
					column=3
				;;
				temp )
					column=2
				;;
				raw )
					column="1-"
				;;
			esac
			# DHT22res=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f $(${SH_ECHO} "$column"))
			brkCnt=1
			unset DHT22res
			DHT22status=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f 1)
			while [[ -z "$DHT22res" ]] || [[ "$DHT22res" == "0" ]] || [[ "$DHT22status" -ne "0" ]]; do
				DHT22res=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f $(${SH_ECHO} "$column"))
				if [[ "$DHT22res" == "" ]]; then
					logThis "Unable to read sensor. Retrying ($brkCnt/$maxTries) in $retrySleep secs." "D"
					if [[ "$brkCnt" -lt "$maxTries" ]]; then
						sleep $retrySleep
						((brkCnt++))
					else
						DHT22res=-99
						push=0
						logThis "<<< !! Unable to read sensor. Too many errors, give up. !! Result: '$DHT22res' >>>"
						break;
					fi
					DHT22raw=$(/usr/local/sbin/DHTXXD)
					DHT22status=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f 1)
				fi
			done

			while [ "$DHT22status" -gt "0" ]; do
				logThis "DHT22 read iteration $i/$maxWaitIters" "T"
				if [[ "$i" -ge "$maxWaitIters" ]]; then
					# Remove DHT22 lock for others to read the DHT22...
					[ $(${SH_RM} -f $dht22LockFile & > /dev/null) ] && err "2" "$dht22LockFile" || logThis "Lock file $dht22LockFile removed." "D"

					iterSecs=$(echo "scale=0; ($i*$DHTsleep)/1"|bc -l)
					logThis "Read error from DHT22. Error count: $i of $maxWaitIters [$iterSecs sec(s)]). Result: '$DHT22res', status: '$DHT22status'." "C"
					err 19 "DHT22 status: $DHT22status, read: $DHT22res"
					exit 1
				fi

				in=$(${SH_DHT}|${SH_CUT} -d " " -f 2)
				# No need for lock file here as we haven't removed the one we created earlier...
				# Just make sure we are not reading it too fast
				${SH_SLEEP} $DHTsleep;

				DHT22raw=$(/usr/local/sbin/DHTXXD-exec)
				DHT22res=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f $(${SH_ECHO} "$column"))
				DHT22status=$(${SH_ECHO} "$DHT22raw"|${SH_CUT} -d " " -f 1)
				[ "$DHT22status" -eq "0" ] && logThis "Read error from DHT22 recovered; stat: $DHT22status, read: $DHT22res" "D"
				(( i++ ))
			done
			if [ ! "$1" == "raw" ]; then
				z=$(${SH_ECHO} "scale=1;$(${SH_ECHO} $DHT22res)/1" | bc -l)
				logThis "Result converted to '$z' for to be sent back." "D" "$FUNCNAME"
			fi
			;;
		raw )
			;;
		* )
			err
			;;
	esac
	if [ "$1" == "raw" ]; then
		logThis "RAW data was called. No conversions done, will return with previous result." "T" "$FUNCNAME"
		z="$DHT22raw"
	fi
#	[ $(${SH_RM} -f $dht22LockFile & > /dev/null) ] && err "2" "$dht22LockFile" || logThis "Lock file $dht22LockFile removed." "D" "$FUNCNAME"
#	logThis "$FUNCNAME() over and out!" "T" "$FUNCNAME"
	logThis "$FUNCNAME() result: $DHT22res." "I" "$FUNCNAME"
	${SH_ECHO} "$z"
	trackTime "$functionStartTime" "$(date +'%s.%N')" "$FUNCNAME"
}
