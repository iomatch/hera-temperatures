#!/bin/bash
myNameIs=${0##*/}
myPathIs=${0%/*}

#################################
#
#  version: 0.0.3.0021
#  date: 10.12.2018
#  mod': 03.02.2019
#  Copyright Tommi Nikkilae 2018
#  url: http://f8.oire.fi/blog (techy things)
#  url: http://f8.oire.fi/ (my photos)
#  email: f8@oire.fi
#  Released under GNU GPLv3
#
#################################

#################################
#
#  ext.conf
#
	[ -z "$logging" ] && logging=0
	[ -z "$debug" ] && debug=0
	if [ "$debug" -gt "0" ]; then
		debugInfo="$myNameIs :: I am $myPathIs/$myNameIs"
		[ "$logging" == "1" ] && logger "$debugInfo  [logging: DISABLED]" || logger "$debugInfo [logging: ENABLED]"
	fi
#
#  see if /lockdir/ is writable. if not, die
	lockdir="/lockdir"
	[ ! -w "$lockdir" ] && exit 50 #"$lockdir/"
#
#  shell commands
#
	. "$myPathIs/etc/shellcommands.cfg"
#
#  err()
#
	. "$myPathIs/etc/errors.cfg"
#
#
#  read/load configuration option specific to this script (if found)
	myConfFile="$myPathIs/etc/conf/$myNameIs.conf"
	if [ -f "$myConfFile" ]; then
		. "$myConfFile"
			[ "$debug" -gt "0" ] && logger "$myNameIs :: read $myConfFile"
		else
			[ "$debug" -gt "0" ] && logger "$myNameIs :: $myConfFile not found. This is not an error."
		fi
#
#  ext. conf end
#
#################################

#################################
#
#  Use trap when locking the script from running multiple sessions
#  or at least running any real actions multiple times
	lock="$lockdir/."$myNameIs".lock"
	if ! ${SH_MKDIR} $lock &> /dev/null; then
		${SH_LOGGER} "$myNameIs :: Script already running. Exiting."
		exit 1
	fi
	trap 'rm -rf $lock' EXIT  # remove the lockdir on exit

#################################
#
#  Check of root privileges are required
#  and if they are exit if user is not root
#  NOTE! The notion is that ALL scripts must
#  be defined as NOT to require root privileges
#  or root privileges will be needed.
#
	[ -z "$rootRequired" ] && rootRequired=1
	if [ "$rootRequired" = "1" ]; then
		if [ "$EUID" -ne "0" ]; then
			${SH_ECHO} "This script must be run as root"
			exit 1
		fi
	fi
#
#
#################################

#################################
#
#  If you want errors to kill the script, use
#	errKills=1
#  else the exit code is just returned from function with
#	errKills=0
#  If nothing is defined, we use 1 (enabled)
	[ -z "$errKills" ] && errKills=1
#
#
#################################

#################################
#
#  Debugging setup. Defines if more messages are displayed/pushed.
#  If nothing is defined, we use 0 (disabled)
#
	[ -z "$debug" ] && debug=0
	[ "$1" = "--test" ] && debug=1 && ${SH_ECHO} "Debugging mode enabled."
	if [ "$debug" -gt "0" ]; then
#		SH_LOGGER="/bin/echo"
		SH_PUSHBULLET="/bin/echo";
	fi
#
#################################

#################################
#
#  Define if push notifications are sent or not
#
	push=0
#
#  Define the minimum time between push notifications
#  The default is 15 mins so push notifications
#  would not colg up the system or recipient's device.
#
	[ -z "$minNotifyIntervalInMinutes" ] &&	minNotifyIntervalInMinutes=15
#
#################################

#################################
#
#  Common variables setup
#
	myWholeNameIs=${0}
	myArguments=${@}
	title="$HOSTNAME [$myNameIs]"
	declare -g trckErr
	trckErr="/lockdir/."$myNameIs".err.lock"
	sleep=10
	randomString=$(${SH_CAT} /dev/urandom | ${SH_TR} -dc 'a-zA-Z0-9' | ${SH_FOLD} -w 16 | ${SH_HEAD} -n 1)
	tmpFile="/tmp/"$randomString
	sTime=$(${SH_DATE} +'%s')
	OFFSET=$(date +%z)
	SIGN=${OFFSET:0:1}
	HOURS=${OFFSET:1:2}
	MINUTES=${OFFSET:3:2}
	EPOCH=$(date +%s)
	sConvTime=$(( ${sTime} ${SIGN} ( ${HOURS} * 3600 + ${MINUTES} * 60 ) ))
	logdate=$(${SH_DATE} -d @"$sTime" +'%d.%m.%Y %H:%M:%S')
	waitThisLong=$(( minNotifyIntervalInMinutes * 60 ))
	usageMessagePath="$myPathIs/etc/usg"
	usageMessageFile=$usageMessagePath"/"$myNameIs".usg"
#
#
#  Common variables setup end
#
#################################

#################################
#
#  Set some more [local] variables
#
#################################

#################################
#
#  Functions begin here
#
usage() {
	[ -e "$usageMessageFile" ] && usageMessage=$(<$usageMessageFile)
	[ -z "$usageMessage" ] && usageMessage=' [No additional help provided. Sorry.]'
	usageMessage="Usage: "$myNameIs" "$usageMessage"\n"
	${SH_ECHO} -e "$usageMessage"
	exit 1
}

logThis() {
if [ "$logging" -gt "0" ]; then
	[ "$debug" -gt "0" ] && ${SH_LOGGER} "$myNameIs :: debug: $debug, logging: $logging $1" || ${SH_LOGGER} "$myNameIs :: $1"
	[ -e "$2" ] && ${SH_LOGGER} "$2"
fi
}

ntfy() {
	[ -z "$2" ] && title=$2

	###################################################################################################
	#
	#  Use PushBullet with care: you can easily flood a recipient with
	#  infinite number of messages if ntfy() is run from err() and
	#  script is scheduled to run every x mins or so... I use a coarse file-named-with-ID as identity 
	#  placed in /lockdir/ for keeping track if a PushBullet msg has already been sent.
	#  Make sure $trckErr is unique but not too much (so it will still be recognized by the script).
	#
	#  ${SH_LOGGER} "$myNameIs :: $1"
	#  fNm=$(${SH_ECHO} $1|${SH_TR} -d '/')
	#  trckErr="/lockdir/"$myNameIs"-"$fNm # or leave undefined for default (see above)
	#  [[ -f "$trckErr" && "$timeDiff" -gt "$waitThisLong" ]] && ${RM} -f $trckErr ||  err "4" "$timeDiff"
	#
	###################################################################################################

	###################################################################################################
	#
        # Not all ntfy's are created equal. If "push" is set 0 (default value) no PushBullet is launhced.
	if [ "$push" -gt "0" ]; then
		if [ ! -e "$trckErr" ]; then
		${SH_TOUCH} $trckErr
			if [ -e "$trckErr" ]; then
				logThis "Lock file ($trckErr) created for push notifications."
			else
				err "1" "$trckErr"
			fi

			###################################################################################
			#
			#  The default errKills value (=1) takes care of killing the script before any
			#  PushBullet msg is sent but if you change the errKills value to 0
			#  this will no longer happen and you will flood error message
			#  because there is no trckErr file and one cannot be created!
			#
			#  This is needed for *$debug* as the default usage of PushBullet in script
			#  requires suppressing all output. This combined with *$debug* makes the
			#  SH_PUSHBULLET echo it's variables to /dev/null. So, if debug is enabled (>0) 
			#  we'll logThis instead. Great success!
			#
			###################################################################################

			[ "$debug" -gt "0" ] && logThis "$1" "$2" || ${SH_PUSHBULLET} "$1" "$title" &> /dev/null
		fi
	fi
	[ "$debug" -gt "0" ] && ntfMsg="[DEBUG MODE] "$1 || ntfMsg=$1
	[ "$debug" -gt "0" ] && logThis "$ntfMsg" "$2"
	#
	###################################################################################################

}

getDHTread() {
	title="DHT22"
        case $1 in
                hum )
			res=$(${SH_DHT}|${SH_CUT} -d " " -f 3)
			msg="$title: Humidity: $res %"
			;;
                temp )
			res=$(${SH_DHT}|${SH_CUT} -d " " -f 2)
			msg="$title: Temperature: $res "$'\xc2\xb0'"C"
			;;
	esac
	z=$(${SH_ECHO} "scale=2;$res*1" | bc -l)
	${SH_ECHO} $res
}

function convertTimeStampEpoch() {
	# human to epoch (eg. "Apr 28 07:50:01" to 1524916201)
	res=$(date -d "${1}" +"%s")
	${SH_ECHO} $res
}

function convertTimeStampHuman() {
	# epoch to human (eg. 1524916201 to "26.11.1970 07:50:01")
	res=$(date -d "@${1}" +"%d.%m.%Y %H:%M:%S")
	${SH_ECHO} $res
}

function convertTimeStampHumanZeroed() {
	# epoch to human (eg. 1524916201 to "26.11.1970 07:50:01")
	res=$(date -d "@${1}" +"%d.%m.%Y %H:%M")
	${SH_ECHO} $res
}

floatToInt() {
	${SH_PRINTF} "%.0f\n" "$1"
}

round() {
	[[ -z "$1" || -z "$2" ]] && err 30
	decimals=$(${SH_ECHO} ${2#-})
	[ "$decimals" -gt "4" ] && decimals=4
	res=$(${SH_AWK} 'BEGIN{printf "%.'"$decimals"'f\n", ('"$1"')}')
	${SH_ECHO} $res
}

show_versions() {
	/usr/local/sbin/sh.versions
}

versionHandler() {
	${SH_ECHO} "$@" | ${SH_AWK} -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

transfer() {
	username=$3
	host=$4
	[ -z "$1" ] && err 10 "source"
	[ ! -e "$srcFile" ] && err 8 "$srcFile"
	tryCount=0
	tryLimit=10
	${SH_SCP} -Bq $1 $3@$4:$2
	while [ "$?"  -ne "0" ]; do
		${SH_SCP} -Br $1 $3@$4:$2
		[ "$tryCount" -le "$tryLimit" ] || err 9 "$1"
		(( tryCount +1 ))
		${SH_SLEEP} 1
	done
}

transfer_debug() {
	username=$3
	host=$4
	[ -z "$1" ] && err 10 "source"
	[ ! -e "$srcFile" ] && err 8 "$srcFile"
	${SH_ECHO} "${SH_SCP} -Bq $1 $3@$4:$2"
}

checkDep() {
	[ "$debug" -gt "0" ] && logThis "Checking dependency for $1..."
	if [ -e "$1" ]; then
		[ "$debug" -gt "0" ] && logThis "Dependency $1 found. It is safe to continue."
	else
		err 5 "$1"
	fi
}

function displaytime {
	local T=$1
#	local Y=$((T/60/60/24/365))
	local D=$((T/60/60/24))
	local H=$((T/60/60%24))
	local M=$((T/60%60))
	local S=$((T%60))
#	(( $Y > 0 )) && ${SH_PRINTF} '%d years ' $Y
	(( $D > 0 )) && ${SH_PRINTF} '%d days ' $D
	(( $H > 0 )) && ${SH_PRINTF} '%d hours ' $H
	(( $M > 0 )) && ${SH_PRINTF} '%d minutes ' $M
	(( $D > 0 || $H > 0 || $M > 0 )) && ${SH_PRINTF} 'and %d seconds\n' $S || ${SH_PRINTF} '\e[0;33m%d seconds\e[0m\n' $S
#(( $D > 3 )) && dWarn=1

xT=$(( $sTime - $ntfHr * 3600))
lT=$(( $sTime - $T))

(( $xT > $lT )) && hWarn=1 || hWarn=0
return "$hWarn"
}

scriptEnd() {
	##################################################################
	#
	#  Destroy notify lock. Errors will exit program early
	#  so if the script survived here, all is well and notify
	#  lock can be removed if $waitThisLong seconds
	#  have passed. $waitThisLong is to stop error messages
	#  from flooding the recipient.
	#
	[ -f "$trckErr" ] && mTime=$(${SH_STAT} -c %Y "$trckErr") || mTime=0
	timeDiff=$(( sTime - mTime ))
	if [ -a $trckErr ]; then
		[ "$timeDiff" -ge "$waitThisLong" ] && ${SH_RM} -f $trckErr || err "4" "$timeDiff"
	fi
	ntfy "$msg" "$title"
	#
	##################################################################

	#endTme=$(date +%s.%N)
	dt=$(${SH_ECHO} "$endTme - $strtTme" | bc)
	dd=$(${SH_ECHO} "$dt/86400" | bc)
	dt2=$(${SH_ECHO} "$dt-86400*$dd" | bc)
	dh=$(${SH_ECHO} "$dt2/3600" | bc)
	dt3=$(${SH_ECHO} "$dt2-3600*$dh" | bc)
	dm=$(${SH_ECHO} "$dt3/60" | bc)
	ds=$(${SH_ECHO} "$dt3-60*$dm" | bc)

#	printf "Total runtime: %d:%02d:%02d:%02.4f\n" $dd $dh $dm $ds
	${SH_LOGGER} "Total runtime: %d:%02d:%02d:%02.4f\n $dd $dh $dm $ds"
	exit 0
}
#
# Functions end.
#
#################################
