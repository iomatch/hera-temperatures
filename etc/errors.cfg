#!/bin/bash

#################################
#
#  version: 0.6.93
#  date: 13.12.2018
#  mod': 09.04.2022
#  Copyright Tommi Nikkilae 2018
#  url: http://f8.oire.fi/blog (techy things)
#  url: http://f8.oire.fi/ (my photos)
#  email: f8@oire.fi
#  Released under GNU GPLv3
#
#################################

# define colors

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[034m;'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

AWS_path="errors"
AWS_URL="${AWS_server}:${AWS_port}/${AWS_path}"

cCount=1
wCount=1

#default ntfyChannel is 'script'
[[ -z "${ntfyChannel}" ]] && ntfyChannel="script"

errLogging() {
functionStartTime=$(/bin/date +'%s.%N')
logThis "$FUNCNAME started." "X" "$FUNCNAME"
if [[ "$wCount" -gt "0" || "$cCount" -gt "0" ]]; then
	logThis "Trying to log errors to cloud..." "X" "$FUNCNAME"
	logLevelReported="$1"
	exitCode="$2"
	#errorMsg="$msg"
	errorMsg="$3"
	logThis "Variables assigned." "X" "$FUNCNAME"
	[[ -z "$errorMsg" ]] && errorMsg="No error message." #|| errorMsg="$3"
#	case $1 in
#	"C"|"c"|1 )	#critical
#		logLevel=1
#		cCount=$(( cCount - 1 ))
#		;;
#	"W"|"w"|2 )	#warn
#		logLevel=2
#		wCount=$(( wCount - 1 ))
#		;;
#	"I"|"i"|3 )	#info
#		logLevel=3
#		;;
#	"D"|"d"|4 )	#debug
#		logLevel=4
#		;;
#	"T"|"t"|5 )	#trace
#		logLevel=5
#		;;
#	* ) 		#info
#		logInfo=" INFO"
#		logLevel=3
#		;;
#	esac
#	[[ "$exitCode" == "-1" ]] && exitCode="$errorCode"
	#logLevel and exitCode to cloud
	errTime=$(date +'%s')
	callPart="timestamp=$errTime&script=$myNameIs&scriptVersion=$srcVersion&commonErrorsVersion=$errVersion&commonConfigVersion=$cmmVersion&logLevel=$logLevel&exitCode=$exitCode&host=$HOSTNAME"
	callPart+="&errorMsg=$errorMsg"
#	callPartDisplay=$(echo "$callPart"|cut -c 1-80)
	curlRes="Logging to cloud service not allowed: cloudLogObeysPushLock set to '$cloudLogObeysPushLock' and push lock file was found which denies logging to cloud."
	[[ -e "$trckErr" ]] && removePushLock
	if [[ "$cloudLogObeysPushLock" -eq "1" ]]; then
		if [[ -e "$trckErr" ]]; then
			logThis "'cloudLogObeysPushLock' is set: no error logging to cloud is permitted as long as the push lock file ($trckErr) is in place." "X" "$FUNCNAME"
		else
#			curlRes=$(curl -d "$callPart" ${AWS_URL} --silent )
			curlRes=$(curl2cloud "errors" "$callPart")
		fi
	else
#		curlRes=$(curl -d "$callPart" ${AWS_URL} --silent )
		curlRes=$(curl2cloud "errors" "$callPart")
	fi
	logThis "script.................: $myNameIs" "X" "$FUNCNAME" "errorlog"
	logThis "logLevel...............: $logLevelReported" "X" "$FUNCNAME" "errorlog"
	logThis "exitCode...............: $exitCode" "X" "$FUNCNAME" "errorlog"
	logThis "push...................: $push" "X" "$FUNCNAME" "errorlog"
	logThis "hostname...............: $HOSTNAME" "X" "$FUNCNAME" "errorlog"
	logThis "script version.........: $srcVersion" "X" "$FUNCNAME" "errorlog"
	logThis "err() version..........: $errVersion" "X" "$FUNCNAME" "errorlog"
	logThis "common.cfg version.....: $cmmVersion" "X" "$FUNCNAME" "errorlog"
	logThis "URL....................: $AWS_URL" "X" "$FUNCNAME" "errorlog"
	logThis "callPart...............: $callPart" "X" "$FUNCNAME" "errorlog"
	logThis "errorMsg...............: $errorMsg" "X" "$FUNCNAME" "errorlog"
	logThis "Uploaded data to cloud with response: '$curlRes'." "X" "$FUNCNAME" "errorlog"
	logThis "Error logging to cloud function completed." "T" "$FUNCNAME" "errorlog"
fi
trackTime "$functionStartTime" "$(date +'%s.%N')" "$FUNCNAME"
}

err() {
functionStartTime=$(/bin/date +'%s.%N')
	# Get the current log level so
	# we can set it back again
	initLogLevel="$logLevel"
#	logLevel=3
	errorCode="$1"
	case "$errorCode" in
	"1")
		msg="Unable to create lock file ($2)."
		[ -z ${3+x} ] && msg="Error caught while running: $3."
		logLevel="W"
		push=1
		;;

	"2")
		msg="Lock file '$2' found in place."
		runningPID=$(head -1 "${lock}"|cut -d " " -f 1)
		[ ! -z ${3+x} ] && msg="$msg Error caught while running: $3. Lock file master PID: '${runningPID}'"
		[ ! -z ${4+x} ] && caller="$4"
		logLevel="C"
		[[ "$lockCount" -ge "$b2bErrMax" ]] && push=1 || push=0
		;;

	"3")
		msg="Process '$2' crashed with exit code $3. Respawning..."
		logLevel="C"
		push=1
		;;

	"4")
		msg="Lock file not removed, $2 of $waitThisLong seconds passed since last notify. No notify as per design."
		logLevel="D"
		push=0
		;;

	"5")
		msg="Missing: '$2'. Unable to continue."
		logLevel="C"
		push=0
		;;

	"6")
		msg="File ($2) not found. Unable to continue."
		logLevel="C"
		push=0
		;;

	"7")
		msg="Cannot get min/max values. Unable to continue. $2"
		logLevel="C"
		push=1
		;;

	"8")
		msg="File not found: $2"
		push=0
		;;

	"9")
		msg="File transfer error: $2"
		logLevel="C"
		push=1
		;;

	"10")
		msg="No Internet connection available."
		logLevel="C"
		;;

	"11")
		msg="Process $2 not found. Please check!"
		logLevel="C"
		;;

	"13")
		msg="Lock file found. Enable 'multiInstance' if multiple instances of script are needed."
		logLevel="D"
		push=0
		;;

	"15")
		msg="Directory ${2} not found/unwritable."
		msgC="Directory ${RED}${2}${NC} not found/unwritable."
		logLevel="W"
		push=0
		;;

	"17")
		msg="Unrecognized option '$2'."
		logLevel="C"
		push=0
		showUsage="yes"
		;;

	"18")
		msg="Unable to read DS18B20 temperature. Reporting script name: '$2'."
		[ ! -z ${3+x} ] && msg="$msg Number of read retries: $3."
		logLevel="C"
		push=1
		;;

	"19")
		msg="Unable to read DHT22 temperature. Reporting script name: '$2'."
		[ ! -z ${3+x} ] && msg="$msg Number of read retries: $3."
		logLevel="C"
		push=1
		;;

	# This is same as err 20 but with logLevel C
	"20")
		msg="Temperature (in): $2. Notify threshold: $3."
		push=1
		logLevel="C"
		;;
	# This is same as err 20 but with logLevel I
	"21")
		msg="Temperature (in): $2. Notify threshold: $3."
		push=1
		logLevel="I"
		;;

	# This is same as err 23 but with logLevel W
	"22")
		[[ -z "$2" ]] && msg="Temperature (coop) recovered."
		logLevel="W"
		push=1
		;;

	# This is same as err 22 but with logLevel I
	"23")
		[[ -z "$2" ]] && msg="Temperature (coop) recovered."
		logLevel="I"
		push=1
		;;

	"24")
		msg="Temperature read unintelligeble. Reporting script name: '$2'."
		logLevel="W"
		push=1
		;;

	"25")
		msg="$2 is not a valid block device. Die."
		logLevel="C"
		push=0
		ntfy "$msg"
		${SH_ECHO} "$msg"
		usage
		;;

	"26")
		msg="File copy failed for $2. Original final retained in $3."
		logLevel="I"
		push=1
		;;

	"27")
		msg="Unable to access target directory $2."
		logLevel="W"
		push=1
		;;

	"28")
		msg="Umount of $2 unsuccessful."
		logLevel="D"
		push=0
		;;

	"29")
		msg="Mount $2: unsuccessful."
		logLevel="W"
		push=0
		;;

	"30")
		[ ! -z "$2" ] && var=" '$2'"
		msg="Undefined variable${var}. Unable to continue."
		logLevel="W"
		push=0
		;;

	"31")
		msg="$2 not running. You should start it immediately."
		logLevel="I"
		push=1
		case "$2" in
		"dyfi")
			eval "/usr/local/sbin/dyfi-update.pl -d -f /usr/local/etc/dyfi-update.conf &"
			resStart=$?
			msg="$msg Trying to restart dyfi resulted in exit code: $resStart"
			logLevel="D"
			;;
		*)
			msg="$msg Please define a start function for '$2'."
			logLevel="I"
			push=0
			;;
		esac
		;;
	"32")
		msg="$2 not found. Unable to continue."
		logLevel="W"
		push=0
		;;

	"33")
		msg="SNMP not responding! Please verify the functionality of the SNMP service at $2. Regards, cron@root at $HOSTNAME"
		logLevel="W"
		push=1
		;;

	"40")
		[ ! -z "$2" ] && var=" '$2'"
		msg="Undefined variable${var}. Unable to continue."
		logLevel="W"
		;;

	"41")
		msg="Unable to execute '$2'. Unable to continue."
		logLevel="W"
		;;

	"44")
		msg="No data could be found."
		logLevel="W"
		;;

	"45")
		msg="Data was resent for DB: '$2'."
		logLevel="I"
		;;

	"50")
		msg="$2 not writable by user. Die."
		logLevel="C"
		push=0
		;;

	"51")
		msg="Unable to read file $2. Die."
		logLevel="C"
		push=0
		;;

	"52")
		msg="Disk usage above threshold of ${2}%: ${3}"
		logLevel="W"
		#push=1
		;;

	"65")
		# Bluewalker BLE Warn errors
		msg="BLE scan failed."
		logLevel="I"
		push=0
		;;

	"66")
		# Bluewalker BLE Fail!
		msg="All BLE scans failed. Probable BLE device failure."
		logLevel="C"
		push=1
		;;

	"67")
		# Bluewalker BLE Crit errors
		msg="BLE scan re-try failed"
		[[ ! -z "$2" ]] && msg="${msg} for device $2"
		msg="${msg}!"
		logLevel="W"
		push=0
		;;

	"68")
		# Bluewalker errors for hard-2-reach devices
		msg="BLE scan error for hard-2-reach device"
		[[ ! -z "$2" ]] && msg="${msg} $2"
		msg="${msg}!"
		logLevel="I"
		push=0
		;;

	"70")
		msg="No response from $2. Rebooting server..."
		logLevel="W"
		;;

	"77")
		msg="IP/DNS mismatch: $2."
		logLevel="W"
		;;

	"80")
		msg="No parameters given, unable to continue."
		logLevel="W"
		push=0
		;;

	"90")
		msg="Telegram message relay error."
		[[ ! -z "${2}" ]] && msg+=" Telegram API status code: '${2}'."
		logLevel="W"
		push=0
		;;

	"99")
		msg="Test error. Die. Additional info: $2 ($3:$1)"
		logLevel="$3"
		push=1
		;;

	*)
		msg="Unknown error occurred. Error had this additional message: $1 $2 $3."
		logLevel="I"
		;;
	esac
#	logThis "Error message: '$msg'." "T" "$FUNCNAME"

	case "$logLevel" in
#		"c"|"C"|1|"w"|"W"|2|"i"|"I"|3)
		"c"|"C"|1|"w"|"W"|2)
#			llTmp="$logLevel"
			logThis "errLogging() must be called with error level '$logLevel'." "T" "$FUNCNAME"
			logThis "title >>> [!CRIT] >> ${HOSTNAME} :: ${myNameIs}" "D" "$FUNCNAME"
			title="[!CRIT] >> ${HOSTNAME} :: ${myNameIs}"
			header="Error at '${myNameIs}' (PID: $$) :: error: ${errorCode}"
			#errHeader="${myNameIs} ::"
			[[ ! -z "$caller" ]] && header="${header} ${caller} | "
			logThis "title: $title" "T" "$FUNCNAME"
			logThis "msg..: $msg" "T" "$FUNCNAME"
			errLogging "$logLevel" "$errorCode" "$msg" "$title"
#			pushTemp="$push"
#			push=1
			logThis "NTFY! <<>> push set to: '$push' (channel: '${ntfyChannel}')" "T" "$FUNCNAME"
#			logLevel="$llTmp"
			logThis "DEBUG: logLevel: $logLevel, errorCode: $errorCode, lockCount: $lockCount, b2bErrMax: $b2bErrMax" "D" "$FUNCNAME"
			if [[ "$logLevel" == "C" ]]; then
				if [[ "$errorCode" -eq "2" ]]; then
					if [[ "$lockCount" -gt "$b2bErrMax" ]]; then
						logThis "ntfy() for lock file errors send only when "$lockCount" is equal to or over "$b2bErrMax". So it is time!" "T" "$FUNCNAME"
						ntfy "$header $msg" "$title" "${ntfyChannel}"
					else
						logThis "ntfy() for lock file errors send only when "$lockCount" is equal to or over "$b2bErrMax". Which it isnt't." "T" "$FUNCNAME"
						echo "$(( lockCount++ ))" > "$lock"
					fi
				fi
			fi
			[[ ! -z "${msg}" ]] && { ntfy "${msg}" "${header}" "${ntfyChannel}"; logThis "Something important was just notified: '${msg}'." "D" "${FUNCNAME}"; }
#			push="$pushTemp"
			;;
	esac

#	logThis "<<<>>> push set to: '$push'" "T" "$FUNCNAME"
#	logThis "logLevel: <>>>>>>>>>>>>>>>>>>>>>>  '$logLevel' ($3)" "$logLevel"
	initErrCode=${exitCode}
	exitCode=$(( 64 + exitCode ))
	logThis "exitCode is now set to '${exitCode}'." "D" "$FUNCNAME"
	[[ "$initErrCode" -le "9" ]] && errCodeCombined="0$initErrCode$exitCode" || errCodeCombined="$initErrCode$exitCode"
	logThis "$msg (error code: $errorCode)" "$logLevel" "$FUNCNAME"
	[[ -z "$msgC" ]] && ${SH_ECHO} -e "Error $errCodeCombined: $msg" || ${SH_ECHO} -e "Error $errCodeCombined: $msgC"
	[[ "$showUsage" == "yes" ]] && usage

	if [[ "$errKills" -gt "0" ]]; then
		re='^[0-9]+$'
		if ! [[ $exitCode =~ $re ]] ; then
			exitCode=1
		fi
		logThis "Exiting from errors." "I"
		exit "$exitCode"
	else
		return "$exitCode"
	fi

trackTime "$functionStartTime" "$(date +'%s.%N')" "$FUNCNAME"

}
