#!/bin/bash
strtTme=$(date +%s.%N)

#################################
#
#  version: 0.0.1.0001
#  date: 19.07.2018
#  mod': 03.02.2018
#  Copyright Tommi Nikkilae 2018-2019
#  url: http://f8.oire.fi/blog (techy things)
#  url: http://f8.oire.fi/ (my photos)
#  email: f8@oire.fi
#  Released under GNU GPLv3
#
#################################

# Use
#
	rootRequired=0
#
# if the script DOES NOT need elevated priviledges
# NOTE: user must explicitly define rootRequired=0
# or root priviledges will be needed!

#################################
#
#  Message for usage()
#  If one is not provided
#  we will look for one in the
#  directory defined in common.cfg
#  and provide that if found.
#
#	IFS='' read -r -d '' usageMessage <<ENDMESSAGE
#	A brief summary of the command and how it operates.
#	$(/usr/bin/basename "$0") uses no parameters.
#	NOTE! One must be provided still!
#	ENDMESSAGE
#
# This ends usage() message [usageMessage]
#
#################################

#################################
#
#  Common variables
#
#  for debugging, use 1 (or '--test')
#  for production, use 0
#  Default is '0'
	debug=0
	logging=1
#
#  ALL common configurations
#  and functions, etc. go to:
#
#  /usr/local/etc/common.cfg
#
	myPathIs=${0%/*}
	. "$myPathIs/etc/common.cfg"
#
#  If you want errors to kill the script, use
	errKills=1
#  else the exit code is just returned from function with
#	errKills=0
#  Default is '1'
#
#  Common variables end
#
#################################

#################################
#
#  Dependencies check
#  Use this function to check for files that should be available. If not
#  found, the script will err() (and usually die() if errKills is set to
#  > 0.
#
#	checkDep "/usr/lib/libpigpiod_if2.so"
	checkDep "/sys/bus/w1/devices/28-03170422eaff"
#
#  Dependencies check end
#
################################

#################################
#
#  Define if push notifications are sent or not
#
	push=0
#
#  Define the minimum time between push notifications
#
	minNotifyIntervalInMinutes=30
#
#################################

#################################
#
#  Set some more variables here if needed
#	myVar1=foo
#	myVar2="Lorem ipsum."
#
#	Obsoleted here, see etc/conf/
#
#	tempOutFile="/tmp/tempOut.txt"
#	tempKanalaFile="/tmp/tempKanala.txt"
#	humKanalaFile="/tmp/humKanala.txt"
#	OID=".1.3.6.1.2.1.25.1.11.1"
#	res="0"
#	mySensor1="/sys/bus/w1/devices/28-03170422eaff"
#
#################################

#################################
#
#  Functions begin here
#
#  Functions end. Your code starts here.
#
#################################

# If no parameter given print
# usage instructions for client
	[ -z "$1" ] && usage

#################################
#
# Actual code part goes here...
#
${SH_TOUCH} $tempOutFile
${SH_TOUCH} $tempKanalaFile
${SH_TOUCH} $humKanalaFile

[ -z "$1" ] && usage

case $1 in
	-out )
		tempRaw=$(${SH_GREP} "t=" $mySensor1/w1_slave|${SH_CUT} -d "=" -f 2)
		OID=".1.3.6.1.2.1.25.2.11"

		z=$(${SH_ECHO} "scale=1;$tempRaw/1000" | bc -l)

		[ -w "$tempOutFile" ] && ${SH_ECHO} $z > $tempOutFile || logThis "$tempOutFile not writable"

		${SH_ECHO} $OID
#		${SH_ECHO} "GAUGE"
		${SH_ECHO} "INTEGER"
		${SH_ECHO} $tempRaw

		title="DS18B20"
		msg="$title: Temperature: $z"$'\xc2\xb0'"C [data for SNMP poller: $tempRaw]"
	;;
	-in )
		z=$(getDHTread "temp")
#		zTMP=$(getDHTread "temp")
#		z=round "$zTMP" "1"
		OID=".1.3.6.1.2.1.25.1.11.1"

		${SH_ECHO} $OID
#		${SH_ECHO} "GAUGE"
		${SH_ECHO} "INTEGER"
		${SH_ECHO} $z| ${SH_AWK} '{print int($1+0.5)}'

		res=$(${SH_ECHO} "scale=1;$z/10" | bc -l)
		[ -w "$tempKanalaFile" ] && ${SH_ECHO} $res > $tempKanalaFile || logThis "$tempKanalaFile not writable"

		title="DHT22"
		msg="$title: Temperature: $res"$'\xc2\xb0'"C [data for SNMP poller: $z]"

		;;
	-hum )
		z=$(getDHTread "hum")
		OID=".1.3.6.1.2.1.25.5.11.1"

		${SH_ECHO} $OID
		${SH_ECHO} "GAUGE"
		${SH_ECHO} $z| ${SH_AWK} '{print int($1+0.5)}'

		res=$(${SH_ECHO} "scale=1;$z/10" | bc -l)
		[ -w "$humKanalaFile" ] && ${SH_ECHO} $res > $humKanalaFile || logThis "$humKanalaFile not writable"

		title="DHT22"
		msg="$title: Humidity: $res% [data for SNMP poller: $z]"
		;;

	* )
		usage
esac

#
#################################

#################################
#
# End the script
#
	scriptEnd
#
#################################
