#!/bin/bash
strtTme=$(date +%s.%N)

#################################
#
#  version: 0.0.1.0012
#  date: 19.07.2018
#  mod': 15.02.2018
#  Copyright Tommi Nikkilae 2018-2019
#  url: http://f8.oire.fi/blog (techy things)
#  url: http://f8.oire.fi/ (my photos)
#  email: f8@oire.fi
#  Released under GNU GPLv3
#
#################################

# Use
#
	rootRequired=0
#
# if the script DOES NOT need elevated priviledges
# NOTE: user must explicitly define rootRequired=0
# or root priviledges will be needed!

#################################
#
#  Message for usage()
#  If one is not provided
#  we will look for one in the
#  directory defined in common.cfg
#  and provide that if found.
#
#	IFS='' read -r -d '' usageMessage <<ENDMESSAGE
#	A brief summary of the command and how it operates.
#	$(/usr/bin/basename "$0") uses no parameters.
#	NOTE! One must be provided still!
#	ENDMESSAGE
#
# This ends usage() message [usageMessage]
#
#################################

#################################
#
#  Common variables
#
#  for debugging, use 1
#  for production, use 0
#  Default is '0'
	debug=0
	logging=3
#
#  ALL common configurations
#  and functions, etc. go to:
#
#  /usr/local/etc/common.cfg
#
	myPathIs=${0%/*}
#	myPathIs="/usr/local"
	. "$myPathIs/etc/common.cfg" || echo "Error loading common files..."
#
#  If you want errors to kill the script, use
	errKills=1
#  else the exit code is just returned from function with
#	errKills=0
#  Default is '1'
#
#  Common variables end
#
#################################

#################################
#
#  Dependencies check
#  Use this function to check for files that should be available. If not
#  found, the script will err() (and usually die() if errKills is set to
#  > 0.
#
	checkDep "/usr/lib/libpigpiod_if2.so"
#
#  Dependencies check end
#
################################

#################################
#
#  Define if push notifications are sent or not
#
	push=0
#
#  Define the minimum time between push notifications
#
	minNotifyIntervalInMinutes=1
#
#################################

#################################
#
#  Set some more variables here if needed
#
#	myVar1=foo
#	myVar2="Lorem ipsum."
#
	OID=".1.3.6.1.2.1.25.1.11.1"
	res="0"
	mySensor1="/sys/bus/w1/devices/28-03170422eaff"
#
	tempOutFile="/tmp/tempOut.txt"
	tempKanalaFile="/tmp/tempKanala.txt"
	humKanalaFile="/tmp/humKanala.txt"
#
#################################

#################################
#
#  Functions begin here
#
#  Functions end. Your code starts here.
#
#################################

#################################
#
#  Run trace for common variables so that they are logged with their current values.
#
#  traceVars
#
#################################

# If no parameter given print
# usage instructions for client
	if [ -z "$1" ]; then
		logThis "No parameters given, unable to continue." "C"
		usage
	fi

#################################
#
# Actual code part goes here...
#
	${SH_TOUCH} $tempOutFile
	${SH_TOUCH} $tempKanalaFile
	${SH_TOUCH} $humKanalaFile

	[ -f "$tempOutFile" ] && [ "$(stat -c %a "$tempOutFile")" -ne "777" ] && chmod 777 "$tempOutFile"
	[ -f "$tempKanalaFile" ] && [ "$(stat -c %a "$tempKanalaFile")" -ne "777" ] && chmod 777 "$tempKanalaFile"
	[ -f "$humKanalaFile" ] && [ "$(stat -c %a "$humKanalaFile")" -ne "777" ] && chmod 777 "$humKanalaFile"

	case $1 in
		-out )
			tempRaw=$(${SH_GREP} "t=" $mySensor1/w1_slave|${SH_CUT} -d "=" -f 2)
			OID=".1.3.6.1.2.1.25.2.11"

			z=$(${SH_ECHO} "scale=1;$tempRaw/1000" | bc -l)

			[ -w "$tempOutFile" ] && ${SH_ECHO} "$z" > $tempOutFile || logThis "$tempOutFile not writable" "D"

			${SH_ECHO} $OID
#			type="GAUGE"
			type="INTEGER"
			${SH_ECHO} "$type"
			${SH_ECHO} "$tempRaw"

			title="DS18B20"
			msg="$title: Temperature: $z"$'\xc2\xb0'"C [data for SNMP poller: $tempRaw]"
			logThis "$msg" "T"
			logThis "snmp answer: $OID $type = $tempRaw" "D"
			;;
		-in|-hum )
		# This is here until we get our /usr/local/sbin/DHTXXD to function properly...
		#SH_DHT="/usr/local/sbin/DHTXXD-exec"
		#SH_DHT="/usr/local/sbin/DHTXXD"

			logThis "DHT22 called" "T"
			case $1 in
				"-hum" )
					srcRd="hum"
					srcName="Humidity"
					#OID=".1.3.6.1.2.1.25.5.10.0"
					OID=".1.3.6.1.2.1.25.5.11"
					;;

				"-in" )
					srcRd="temp"
					srcName="Temperature"
					#OID=".1.3.6.1.2.1.25.1.10.0"
					OID=".1.3.6.1.2.1.25.1.11"
					;;

				* )
					srcRd="temp"
					srcName="Data"
					OID=".1.0.0.0.0.0.0.0.0.0"
					;;
			esac
			logThis "Querying DHT22 ($srcRd) from getDHTread()..." "T"
			res=$(getDHTread "$srcRd")
			logThis "Result: $res" "T"
#			res=$(${SH_DHT}|${SH_CUT} -d " " -f 2)
			z=$(${SH_ECHO} "scale=0;$(${SH_ECHO} $res)*100/10" | bc -l)
			logThis "Result modified to: $res" "T"
#			z=round "$zTMP" "1"

			${SH_ECHO} $OID
#			type="GAUGE"
			type="INTEGER"
			${SH_ECHO} $type
			finalRes=$(${SH_ECHO} $z| ${SH_AWK} '{print int($1+0.5)}')
			logThis "\$z [$z] converted to \$finalRes '$finalRes'" "T"
			${SH_ECHO} -e "$finalRes"
			logThis "snmp answer: $OID $type = $finalRes" "D"

			res=$(${SH_ECHO} "scale=1;$z/10" | bc -l)
			[ -w "$tempKanalaFile" ] && ${SH_ECHO} $res > $tempKanalaFile || logThis "$tempKanalaFile not writable" "D"

			title="DHT22"
			[ "$1" == "-hum" ] && msg="$title: $srcName: $res% [data for SNMP poller: $z]"
			[ "$1" == "-in" ] && msg="$title: $srcName: $res"$'\xc2\xb0'"C [data for SNMP poller: $z]"
			logThis "$msg" "I"
			logThis "DHT22 poll over." "T"
			;;

		* )
			usage
			;;
	esac
#
#################################

#################################
#
# End the script
#
scriptEnd
#
#################################
