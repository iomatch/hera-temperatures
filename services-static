#!/bin/bash
runtimeStart=$(date +'%s.%N')
#################################
#
# version: 0.0.1
# date: 16.12.2022
# mod': 16.12.2022
# Copyright Tommi Nikkilae 2018-2019
# url: http://f8.oire.fi/blog (techy things)
# url: http://f8.oire.fi/ (my photos)
# email: f8@oire.fi
# Released under GNU GPLv3
#
#################################

#################################

# Use
#
        rootRequired=1
#
# if the script DOES NOT need elevated priviledges
# NOTE: user must explicitly define rootRequired=0
# or root priviledges will be needed!

#################################
#
#  Message for usage()
#  If one is not provided
#  we will look for one in the
#  directory defined in common.cfg
#  and provide that if found.
#
#       IFS='' read -r -d '' usageMessage <<ENDMESSAGE
#       A brief summary of the command and how it operates.
#       $(/usr/bin/basename "$0") uses no parameters.
#       NOTE! One must be provided still!
#       ENDMESSAGE
#
# This ends usage() message [usageMessage]
#
#################################

#################################
#
#  Common variables
#
#  for debugging, use 1 (or '--test')
#  for production, use 0
#  Default is '0'
        debug=1
        logging=1
	sysinfoFileTMP="/run/services-static-runtime"
	sysinfoFile="/run/services-static"

	[[ -f "${sysinfoFile}" ]] && truncate -s 0 "${sysinfoFile}"
#
#  ALL common configurations
#  and functions, etc. go to:
#
#  /usr/local/etc/common.cfg
#
#	myPathIs="$HOME"
	. "/home/pi/bin/etc/common.cfg"
#
#  If you want errors to kill the script, use
        errKills=1
#  else the exit code is just returned from function with
#       errKills=0
#  Default is '1'
#
#  Common variables end
#
#################################

#################################
#
#  Functions begin here
#
#
function quickTimer() {
	runtimeTempStart=$1
	runtimeTempEnd=$(date +'%s.%N')
	runtimeTempTotal=$(echo "scale=2;($runtimeTempEnd-$runtimeTempStart)/1"|bc -l)
	runtimeTempTime=$(displaytime "${runtimeTempTotal}")
	echo "${runtimeTempTime}"
}
#
#  Functions end. Your code starts here.
#
#################################

loadLimit=3
diskLimit=75
memLimit=95
tempLimit=50

timeout=7

RED="\033[1;31m"
YELLOW="\033[1;33m"
GREEN="\033[1;32m"
lightBLUE="\033[1;94m"
lightMAGENTA="\033[1;95m"

bold="\e[1m"
underline="\e[4m"
italic="\e[3m"
NOCOLOR="\033[0m"

logThis "Detecting services..." "D"
quickStartSrv=$(date +'%s.%N')
echo -e "${bold}Services${NOCOLOR}" >> "${sysinfoFileTMP}"
for service in ssh dhcpcd bind9 pihole-FTL data rsyslog watchdog dyfi smbd ntp vncserver apache2 lighttpd grafana-server mysqld mariadb serverJS cockpit cups transmission-daemon cryptdrivemount file-monitor checkmyip smbpasswd-web temperature-monitor-service grafana-daemon mqttreporter mqttservicecontrol; do
	quickStart=$(date +'%s.%N')
	logThis "Checking ${service} and status..." "D"
	case ${service} in
		data)
			serviceType="mount"
			;;
		cockpit)
			serviceType="socket"
			;;
		*)
			serviceType="service"
			;;
	esac

#	assume inactive satus
	status=1
#	then check status
#	status=$(service_exists "${service}" "${serviceType}")
	if service_exists "${service}" "${serviceType}"; then
		status=$(systemctl --quiet is-active "${service}.${serviceType}"; echo $?)
#		status=$(systemctl status $service | grep "Active")
		logThis "${service}.${serviceType} status '${status}'." "D"
		if [[ "$status" -eq "0" ]]; then
			statusInfo="  active  "
			clr="${GREEN}"
		else
			statusInfo=" inactive "
			clr="${RED}"
		fi
		srv=$(echo $service|cut -d "." -f 1)
		srv="${srv:0:22}"
		logThis "${srv}.${serviceType}: $(echo "${statusInfo}"|xargs)" "I"
		printf "  %-38s[${clr}%s${NOCOLOR}]\n" "${srv}.${serviceType}" "${statusInfo}" >> "${sysinfoFileTMP}"
	fi
	ran4=$(quickTimer "${quickStart}")
	unset status
	logThis "${service} detection completed in ${ran4}." "I"
done
echo >> "${sysinfoFileTMP}"
if [[ -f "/usr/bin/supervisorctl" ]]; then
	[[ $(supervisorctl status tuxtunnel|xargs|grep "RUNNING") ]] && printf "  ${YELLOW}%-38s${NOCOLOR}[ ${GREEN}%s${NOCOLOR} ]\n\n" "dataplicity" " alive! "  >> "${sysinfoFileTMP}" || printf "  %-38s[ ${RED}%s${NOCOLOR} ]\n\n" "dataplicity" "  dead  " >> "${sysinfoFileTMP}"
else
	logThis "Dataplicity not detected." "D"
	printf "  %-38s[ %s ]\n\n" "dataplicity" "  n/a   " >> "${sysinfoFileTMP}"
fi

#service IP:ports
if service_exists "bind9"; then
logThis "Checking DNS services..." "D"
echo -e "${bold}DNS listen ports${NOCOLOR}" >> "${sysinfoFileTMP}"
	for service in named pihole; do
		quickStart=$(date +'%s.%N')
		i=0
		while read -r line; do
			listenInfo=$(echo "$line"|tr -d "LISTEN"|xargs|cut -d " " -f 1,4)
			listenProto=$(echo "${listenInfo}"|cut -d " " -f 1)
			listenIP=$(echo "${listenInfo}"|cut -d " " -f 2|cut -d ":" -f 1)
			listenPort=$(echo "${listenInfo}"|cut -d " " -f 2|cut -d ":" -f 2)
#			echo "output of vars :: listenInfo: '${listenInfo}', listenProto: '${listenProto}', listenIP: '${listenIP}', listenPort: '${listenPort}'"
			logThis "$service $listenProto $listenIP $listenPort" "I"
			printf "  %6s [%s]:%16s${bold}:%s${NOCOLOR}%s\n" $service $listenProto $listenIP $listenPort >> "${sysinfoFileTMP}"
		done <<< $(sudo netstat -tulpn|grep "${service}"|grep ':53 ')
		ran4=$(quickTimer "${quickStart}")
		logThis "${service} detection completed in ${ran4}." "I"
	done
echo
fi
cp -a "${sysinfoFileTMP}" "${sysinfoFile}" > /dev/null 2>&1
cmp --silent "${sysinfoFileTMP}" "${sysinfoFile}" || err 32 "${sysinfoFile}"
rm -rf "${sysinfoFileTMP}" > /dev/null 2>&1
ran4srv=$(quickTimer "${quickStartSrv}")
logThis "Services detected in ${ran4srv}." "I"
