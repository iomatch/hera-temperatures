#!/bin/bash
strtTme=$(date +%s.%N)
myNameIs=${0##*/}

#################################
#
#  version: 1.2.3.0002
#  date: 25.05.2018
#  mod': 11.02.2019
#  Copyright Tommi Nikkilae 2018-2019
#  url: http://f8.oire.fi/blog (techy things)
#  url: http://f8.oire.fi/ (my photos)
#  email: f8@oire.fi
#  Released under GNU GPLv3
#
#################################

# Use
#
	rootRequired=0
#
# if the script DOES NOT need elevated priviledges
# NOTE: user must explicitly define rootRequired=0
# or root priviledges will be needed!

#################################
#
#  Message for usage()
#  If one is not provided
#  we will look for one in the
#  directory defined in common.cfg
#  and provide that if found.
#
#	IFS='' read -r -d '' usageMessage <<ENDMESSAGE
#	A brief summary of the command and how it operates.
#	$(/usr/bin/basename "$0") uses no parameters.
#	NOTE! One must be provided still!
#	ENDMESSAGE
#
# This ends usage() message [usageMessage]
#
#################################

#################################
#
#  Common variables
#
#  for debugging, use 1 (or '--test')
#  for production, use 0
#  Default is '0'
	debug=0
	logging=0
#
#  ALL common configurations
#  and functions, etc. go to:
#
#  /usr/local/etc/common.cfg
#
	commonFile="/usr/local/etc/common.cfg"
#	[ -f "$myPathIs/etc/common.cfg" ] && commonFile="$myPathIs/etc/common.cfg" || commonFile="/usr/local/etc/common.cfg"
	if [ -f "$commonFile" ]; then
		if ! . "$commonFile"; then
			logger "$myNameIs :: Reading of common file $commonFile failed. Die."
			exit 1
		fi
	else
		logger "$myNameIs :: Common file $commonFile not found. Die."
		exit 1
	fi
#
#  If you want errors to kill the script, use
	errKills=1
#  else the exit code is just returned from function with
#	errKills=0
#  Default is '1'
#
#  Common variables end
#
#################################

#################################
#
#  Dependencies check
#  Use this function to check for files that should be available. If not
#  found, the script will err() (and usually die() if errKills is set to
#  > 0.
#
	checkDep "/usr/local/sbin/DHTXXD-exec"
#
#  Dependencies check end
#
################################

#################################
#
#  Define if push notifications are sent or not
#
	push=0
#
#  Define the minimum time between push notifications
#
	minNotifyIntervalInMinutes=360
#
#################################

#################################
#
#  Set some more variables here if needed
#	myVar1=foo
#	myVar2="Lorem ipsum."
	[ -z ${DHTsleep+x} ] && DHTsleep="2.2"
	[ -z ${maxWaitIters+x} ] && maxWaitIters=15
	iterSecs=$(echo "scale=0; ($maxWaitIters*$DHTsleep)/1"|bc -l)
	if [ "$iterSecs" -ge "45" ]; then
		# Just to make sure the possbile wait cycle for DHT22
		# will break at some point we limit the cycle to 33 secs
		# (+ some from the actual script itself) if DHTsleep * maxWaitIters
		# is more than 45 secs by setting:
		DHTsleep=2.2
		maxWaitIters=15
	fi
	dht22LockFile="/lockdir/dht22LockFile"
#
#################################

#################################
#
#  Functions begin here
#
	removeLock() {
		logThis "DHT22 lock ($dht22LockFile) remove requested..." "T" "$FUNCNAME"
		[ $(${SH_RM} -f $dht22LockFile & > /dev/null) ] && err "2" "$dht22LockFile" || logThis "Lock file $dht22LockFile removed." "D"
	}
#
#  Functions end. Your code starts here.
#
#################################

#################################
#
# Actual code part goes here...
#
# Check for our lock file;
# If exists, wait: another script is accessing DHT22
#
	i=1
	[ -z ${DHTsleep+x} ] && DHTsleep="2.2"
	[ -z ${maxWaitIters+x} ] && maxWaitIters=15
	iterSecs=$(echo "scale=0; ($maxWaitIters*$DHTsleep)/1"|bc -l)
	if [ "$iterSecs" -ge "45" ]; then
		# Just to make sure the possbile wait cycle for DHT22
		# will break at some point we limit the sleep cycle to 33 secs
		# (+ some from the actual script itself) if DHTsleep * maxWaitIters
		# is more than 45 secs by setting:
		DHTsleep=2.2
		maxWaitIters=15
		iterSecs=$(echo "scale=0; ($maxWaitIters*$DHTsleep)/1"|bc -l)
	fi
	logThis "Lock wait cycle now at $DHTsleep sec(s) and $maxWaitIters iterations for maximium of $iterSecs sec(s) of wait cycle..."
	logThis "Checking if DHT22 is available..." "T"
	while [ -f "$dht22LockFile" ]; do
		logThis "DHT22 busy, waiting for $DHTsleep sec(s) for re-read ($i/$maxWaitIters)..." "D"
		${SH_SLEEP} $DHTsleep;
		(( i++ ))
		if [ "$i" -eq "$maxWaitIters" ]; then
			err 19 "$myNameIs" "$i"
			break
		fi
	done

	logThis "Check done. Errors were logged if any." "T"
	logThis "Creating lock file for DHT22 read..." "T"
#
# Create lock file to prevent other scripts from
# accessing DHT22 while we poll it
#
	[ $(${SH_TOUCH} $dht22LockFile & > /dev/null) ] && err "1" "$dht22LockFile" "$FUNCNAME" || logThis "Lock file $dht22LockFile created." "D" "$FUNCNAME"
#
	logThis "Querying the source..." "T"
	sourceData=$(/usr/local/sbin/DHTXXD-exec)
	sourceStatus=$(${SH_ECHO} "$sourceData"|${SH_CUT} -d ' ' -f 1)
	# debugging. Set sourceStatus NOT EQUAL to 0 for error handling to take place...
	#sourceStatus=3
	logThis "Read status from DHT22: $sourceStatus."

	i=1
	maxWaits=3

	while [ "$sourceStatus" -ne "0" ]; do
		logThis "Read status: error. Retrying read [$i/$maxWaits], wait for $DHTsleep secs between reads..." "T"
		${SH_SLEEP} $DHTsleep
		sourceData=$(/usr/local/sbin/DHTXXD-exec)
		sourceStatus=$(${SH_ECHO} "$sourceData"|${SH_CUT} -d ' ' -f 1)
#		sourceStatus=3
		logThis "Read status from DHT22: $sourceStatus."
		(( i++ ))
		if [ "$i" -eq "$maxWaits" ]; then
			logThis "Too many read errors. This will result in error but we need to remove the DHT22 lock file before that so others can have a try at reading DHT22 too."
			removeLock
			#[ $(${SH_RM} -f $dht22LockFile & > /dev/null) ] && err "2" "$dht22LockFile" || logThis "Lock file $dht22LockFile removed." "D"
			err 19 "$myNameIs" "$i"
			break
		fi
	done
	${SH_ECHO} $sourceData
	logThis "Result from source [raw]: $sourceData" "I"
	logThis "Wait for $DHTsleep secs between reads..." "T"
	${SH_SLEEP} $DHTsleep
	removeLock
	#[ $(${SH_RM} -f $dht22LockFile & > /dev/null) ] && err "2" "$dht22LockFile" || logThis "Lock file $dht22LockFile removed." "D"
#
#################################

#################################
#
# End the script
#
	scriptEnd
#
#################################
