#!/bin/bash
strtTme=$(date +%s.%N)

# version: 0.0.0.0005
# date: 22.7.2018
# mod': 22.7.2018
# Copyright Tommi Nikkilae 2018
# url: http://f8.oire.fi/blog (techy things)
# url: http://f8.oire.fi/ (my photos)
# email: f8@oire.fi
# Released under GNU GPLv3

# for debugging, use 1 (or '--test')
# for production, use 0
debug=0

# If you want errors to kill the script, use
#	errKills=1
# else the exit code is just returned from function with
#	errKills=0
errKills=1

SH_BASENAME="/usr/bin/basename"
SH_CAT="/bin/cat"
SH_CP="/bin/cp"
SH_CUT="/usr/bin/cut"
SH_DATE="/bin/date"
SH_DIFF="/usr/bin/diff"
SH_DROPBOXUPLOADER="/usr/sbin/dropbox_uploader.sh"
SH_ECHO="/bin/echo"
SH_FIND="/usr/bin/find"
SH_FOLD="/usr/bin/fold"
SH_GREP="/bin/grep"
SH_HEAD="/usr/bin/head"
SH_LOGNAME="/usr/bin/logname"
SH_LOGGER="/usr/bin/logger"
SH_MKDIR="/bin/mkdir"
SH_NAMEDCHECKZONE="/usr/sbin/named-checkzone"
SH_NAMEDCHECKCONF="/usr/sbin/named-checkconf"
SH_PUSHBULLET="/usr/bin/pushbullet.sh"
SH_RM="/bin/rm"
SH_RMDIR="/bin/rmdir"
SH_RNDC="/usr/sbin/rndc"
SH_RSYNC="/usr/bin/rsync"
SH_SLEEP="/bin/sleep"
SH_STAT="/usr/bin/stat"
SH_TOUCH="/usr/bin/touch"
SH_TR="/usr/bin/tr"

sTime=$(${SH_DATE} +'%s')
logdate=$(${SH_DATE} -d @"$sTime" +'%d.%m.%Y %H:%M:%S')

# set the notify minimum interval in minutes. Default is 15
thisManyMinutes=15

myNameIs="$(${SH_BASENAME} $0)"

# Use trap when locking the script from running multiple sessions
# or at least running any real actions multiple times
#NEW_UUID=$(${SH_CAT} /dev/urandom | ${SH_TR} -dc 'a-zA-Z0-9' | ${SH_FOLD} -w 16 | ${SH_HEAD} -n 1)
lock="/tmp/."$myNameIs".lock"
if ! ${SH_MKDIR} $lock &> /dev/null; then
	${SH_LOGGER} "$myNameIs :: Multiple calls for script detected."
#	exit 1
fi
trap 'rm -rf $lock' EXIT  # remove the lockdir on exit

# Uncomment the following if root priviledges are required
#[[ "$EUID" -ne "0" ]] && ${SH_ECHO} "This script must be run as root"; exit 1

# Debugging setup...
[ "$1" = "--test" ] && debug=1 && ${SH_ECHO} "Debugging mode enabled."
if [ "$debug" -gt "0" ]; then
	SH_LOGGER="/bin/echo"
	SH_PUSHBULLET="/bin/echo";
fi

# Set some more variables
title="$HOSTNAME [$myNameIs]"
sleep=1.5
waitThisLong=$(( thisManyMinutes * 60 ))
trckErr="/lockdir/.$myNameIs.err.lock"
push=0

# Functions begin here
usage (){
	${SH_ECHO} "Usage: $myNameIs [message]"
	exit 1
}

logThis () {
	${SH_LOGGER} "$myNameIs :: $1"
	[ -e "$2" ] && ${SH_LOGGER} "$2"
}

ntfy (){
	[ -z "$2" ] && title=$2

	# Use PushBullet with care: you can easily flood a recipient with
	# infinite number of messages if ntfy() is run from err() and
	# script is scheduled to run every x mins or so...
	# I use a coarse file-named-with-ID as identity placed in temp for
	# this. Make sure $trckErr is unique but not too much (so it will
	# still be recognized by the script).
	#
	# ${SH_LOGGER} "$myNameIs :: $1"
	# fNm=$(${SH_ECHO} $1|${SH_TR} -d '/')
	# trckErr="/tmp/"$myNameIs"-"$fNm # or leave undefined for default (see above)
	# [[ -f "$trckErr" && "$timeDiff" -gt "$waitThisLong" ]] && ${RM} -f $trckErr ||  err "4" "$timeDiff"
	#
	#

        # Not all ntfy's are created equal. If "push" is set 0 (default value) no PushBullet is launhced.
        if [ "$push" -gt "0" ]; then
		if [ ! -e "$trckErr" ]; then
			[ $(${SH_TOUCH} $trckErr & > /dev/null) ] && err "1" "$trckErr" || logThis "Lock file created."
			# This is needed for debug as the default usage of PushBullet in script
			# requires suppressing the output. This combined with debug turns the
			# SH_PUSHBULLET to echo it's variables to /dev/null.
			# So, if debug is enabled (>0) we'll logThis instead. Great success!
			# The default errKills (1) takes care of killing the script before any
			# PushBullet msg is sent but if you change the errKills value to 0
			# this will no longer happen and you will flood error messages
			# because there is no trckErr file and one cannot be created!
			[ "$debug" -gt "0" ] && logThis "$1" "$2" || ${SH_PUSHBULLET} "$1" "$title" &> /dev/null
		fi
	fi
	[ "$debug" -gt "0" ] && ntfMsg="[DEBUG MODE] "$1 || ntfMsg=$1
	logThis "$ntfMsg" "$2"
}

err (){

	case "$1" in
	"1")
		msg="Unable to create lock file '$2'."
		push=1
		;;

	"2")
		msg="Unable to remove the lock file '$2'."
		push=1
		;;

	"3")
		msg="Process '$2' crashed with exit code $3. Respawning..."
		push=1
		;;

	"4")
		msg="Lock file not removed, $2 of $waitThisLong seconds passed since last notify. This means no notify of any kind as per design."
		push=0
		;;

	*)
		msg="Unknown error occurred. Error had this additional message: $1 $2 $3."
		;;
	esac

	ntfy "$msg" "$title"
	exitCode=$(( 64 + $1 ))
	[ "$errKills" -gt "0" ] && exit $exitCode || return $exitCode
}

scriptEnd() {
	# Destroy notify lock. Errors will exit program early
	# so if the script survived here, all is well and notify
	# lock can be removed if $waitThisLong seconds
	# have passed. $waitThisLong is to stop error messages
	# from flooding the recipient.

	[ -f "$trckErr" ] && mTime=$(${SH_STAT} -c %Y "$trckErr") || mTime=0
	timeDiff=$(( sTime - mTime ))
	if [ -a $trckErr ]; then
		[ "$timeDiff" -ge "$waitThisLong" ] && ${SH_RM} -f $trckErr || err "4" "$timeDiff"
	fi
	#ntfy "$msg" "$title"

	endTme=$(date +%s.%N)
	dt=$(echo "$endTme - $strtTme" | bc)
	dd=$(echo "$dt/86400" | bc)
	dt2=$(echo "$dt-86400*$dd" | bc)
	dh=$(echo "$dt2/3600" | bc)
	dt3=$(echo "$dt2-3600*$dh" | bc)
	dm=$(echo "$dt3/60" | bc)
	ds=$(echo "$dt3-60*$dm" | bc)

#	printf "Total runtime: %d:%02d:%02d:%02.4f\n" $dd $dh $dm $ds
#	${SH_LOGGER} "Total runtime: %d:%02d:%02d:%02.4f\n" $dd $dh $dm $ds
	exit 0
}

# Functions end.

dht22LockFile="/tmp/dht22LockFile"

# Check for our lock file;
# If exists, wait: another script is accessing DHT22

while [ -f "$dht22LockFile" ]; do
	logThis "DHT22 busy, waiting..."
	${SH_SLEEP} $sleep;
done

# Create lock file to prevent other scripts from
# accessing DHT22 while we poll it
#logThis "Create lock file for DHT22."
${SH_TOUCH} $dht22LockFile

/usr/local/sbin/DHTXXD-exec

${SH_SLEEP} $sleep
${SH_RM} -f $dht22LockFile
#logThis "Remove lock file for DHT22."

scriptEnd
